{% extends 'base.html.twig' %}

{% block title %}Add new class{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css" rel="stylesheet" />
{%  endblock %}

{% block body %}

    {% import _self as formMacros %}
    {% macro printTextPropertyRow(textPropertyForm) %}
        {{ form_errors(textPropertyForm) }}
        {{ form_row(textPropertyForm.textProperty, {
            'label': 'Scope note'
        }) }}
        {{ form_row(textPropertyForm.languageIsoCode, {
            'label': 'Language'
        }) }}
        {{ form_row(textPropertyForm.creator) }}
        {{ form_row(textPropertyForm.modifier) }}
    {% endmacro %}

    <div class="container">
        <div class="row">
            <div class="col-xs-12">
                <div class="pull-right reset-div">
                    <a href="{{ path('class_new', {'namespace': app.request.get('namespace').id}) }}" class="btn btn-primary pull-right">Reset <span class="fa fa-undo"></span></a>
                </div>
                <h2>
                    Add new class in the {{ app.request.get('namespace') }} namespace
                    <a href="{{ path('namespace_show', {'id': app.request.get('namespace').id}) }}#classes" class="pull-right btn btn-link">
                        <i class="fas fa-arrow-left"></i><span>&nbsp;Back</span>
                    </a>
                </h2>

                {{ form_start(classForm) }}
                    {{ form_errors(classForm) }}
                    {% if  class.isManualIdentifier %}
                        {{ form_row(classForm.identifierInNamespace) }}
                    {% else %}
                        {{ form_widget(classForm.identifierInNamespace, { 'attr': {'style': 'display:none'} }) }}
                    {% endif %}
                    {{ form_row(classForm.labels) }}
                    {% if app.request.get('namespace').topLevelNamespace.isExternalNamespace %}
                    {{ form_row(classForm.identifierInUri, {
                        help: 'This field is automatically pre-filled according to the default settings of the root namespace, but can be modified if necessary.'
                    }) }}
                    {% endif %}

                    <div class="js-text-property-wrapper"
                         data-prototype="{{ formMacros.printTextPropertyRow(classForm.textProperties.vars.prototype)|e('html_attr') }}"
                         data-index="{{ classForm.textProperties|length }}"
                    >
                        {% for textPropertyForm in classForm.textProperties %}
                            {{ formMacros.printTextPropertyRow(textPropertyForm) }}
                        {% endfor %}
                        <a href="#" class="js-example-add">
                            <span class="fa fa-plus-circle"></span>
                            Add an example
                        </a>
                        <a href="#" class="js-example-remove">
                            <span class="fa fa-minus-circle"></span>
                            Close example form
                        </a>
                    </div>

                    <button type="submit" class="btn btn-primary" formnovalidate>Save</button>
                {{ form_end(classForm) }}
            </div>
        </div>
    </div>

{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js"></script>
    <script>

        $(document).ready(function() {
            $('#class_form_parentClass').select2({
                sorter: function(data) {
                    /* Sort data using lowercase comparison */
                    return data.sort(function (a, b) {
                        a = a.text.toLowerCase();
                        b = b.text.toLowerCase();
                        if (a > b) {
                            return 1;
                        } else if (a < b) {
                            return -1;
                        }
                        return 0;
                    });
                }
            });

            $('.js-example-remove').hide();
            if($('[for=class_quick_add_form_textProperties_1_textProperty]').length) {
                //we hide the button in order to prevent the add of more than 2 text properties
                $('.js-example-add').hide();
                $('[for=class_quick_add_form_textProperties_1_textProperty]').text('Example');
                $('.js-example-remove').show();
            }
            var $wrapper = $('.js-text-property-wrapper');
            $wrapper.on('click', '.js-example-add', function(e) {
                e.preventDefault();

                // Get the data-prototype explained earlier
                var prototype = $wrapper.data('prototype');

                // get the new index
                var index = $wrapper.data('index');

                // Replace '__name__' in the prototype's HTML to
                // instead be a number based on how many items we have
                var newForm = prototype.replace(/__name__/g, index);

                // increase the index with one for the next item
                $wrapper.data('index', index + 1);

                // Display the form in the page before the "new" link
                $(this).before(newForm);
                $('#class_quick_add_form_textProperties_1_creator').val($('#class_quick_add_form_textProperties_0_creator').val());
                $('#class_quick_add_form_textProperties_1_modifier').val($('#class_quick_add_form_textProperties_0_creator').val());
                $('.js-example-add').hide();
                $('[for=class_quick_add_form_textProperties_1_textProperty]').text('Example');
                tinymce.init({
                    selector:'.tinymce',
                    plugins : 'autolink link lists charmap print preview paste',
                    entity_encoding : "raw",
                    paste_as_text: true,
                    paste_enable_default_filters: false
                });
                $('.js-example-remove').show();

            });

            $wrapper.on('click', '.js-example-remove', function(e) {
                e.preventDefault();

                // get the new index
                var index = $wrapper.data('index');

                // decrease the index with one for the next item
                $wrapper.data('index', index - 1);

                // remove
                $("[id^='class_quick_add_form_textProperties_1_']").remove();
                $("[for^='class_quick_add_form_textProperties_1_']").remove();
                tinymce.get("class_quick_add_form_textProperties_1_textProperty").remove();
                $('.js-example-add').show();
                $('.js-example-remove').hide();
            });

            if($('#class_quick_add_form_identifierInUri').data('uri-param') < 3){
                $('#class_quick_add_form_identifierInUri').prop('readonly', true);
            }

            $('#class_quick_add_form_labels_0_label, #class_quick_add_form_identifierInNamespace').on('keyup', function(){
                var champIdentifierInNamespace = $('#class_quick_add_form_identifierInNamespace');
                var champIdentifierInUri = $('#class_quick_add_form_identifierInUri');
                var champLabel = $('#class_quick_add_form_labels_0_label');

                // Case 0: identifier
                if(champIdentifierInUri.data('uri-param') == 0){
                    var baseDefault = champIdentifierInUri.data('default-value');
                    if(baseDefault == ''){
                        baseDefault = champIdentifierInNamespace.val();
                    }
                    var newInput = baseDefault;
                }
                // Case 1: identifier + label
                if(champIdentifierInUri.data('uri-param') == 1){
                    var baseDefault = champIdentifierInUri.data('default-value');
                    if(baseDefault == ''){
                        baseDefault = champIdentifierInNamespace.val() + '_';
                    }
                    var newInput = baseDefault + champLabel.val().trim().replaceAll(' ', '_');
                }
                // Case 2: camelCase
                if(champIdentifierInUri.data('uri-param') == 2){
                    var newInput = champLabel.val().trim().replace(/[-_\s]+([a-zA-Z])/g, function(match, letter) {
                        return letter.toUpperCase();
                    });
                }
                champIdentifierInUri.val(newInput);
            });
        } );
    </script>
{% endblock %}