{% extends 'base.html.twig' %}

{% block title %}{{ namespace.namespaceURI }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/css/select2.min.css" rel="stylesheet" />
{% endblock %}

{% block body %}

    <div class="container">
        <h2 class="class-name">
            {{ namespace }} {% if namespace.isTopLevelNamespace %}<span class="label label-default" style="font-size: 12px; vertical-align: middle;">Root</span>{% endif %}
            {% if ((not namespace.isTopLevelNamespace and not namespace.isOngoing) or (namespace.isOngoing and is_granted('edit', namespace))) %}
            <span class="pull-right">
                <div class="btn-group">
                    <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-file-export"></i> Export <span class="caret"></span>
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <a  href="{{ path('api_classes_and_properties_by_namespace_xml_rdfs', {namespace: namespace.id}) }}" download="namespace-{{ namespace.standardLabel }}.rdf">
                                <i class="fas fa-code"></i> RDFS
                            </a>
                        </li>
                        <li>
                            <a  href="{{ path('api_classes_and_properties_by_namespace_xml', {namespace: namespace.id}) }}" download="namespace-{{ namespace.standardLabel }}.rdf">
                                <i class="fas fa-code"></i> OWL-DL
                            </a>
                        </li>
                        <li>
                            <a href="#" data-toggle="modal" data-target="#myModal">
                                    <i class="fas fa-file-alt"></i> &nbsp;&nbsp;DOCX
                            </a>
                        </li>
                    </ul>
                </div>
            </span>
            {% endif %}
        </h2>
        <!-- Options pour export docx -->
        <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">DOCX export options</h4>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <div class="col-xs-6">
                                <p>Quantification</p>
                                <p>
                                    <input type="radio" name="cardinality" id="cardinality-opt-uml" value="cardinality-opt-uml" checked> <label for="cardinality-opt-uml">UML</label><br>
                                    <input type="radio" name="cardinality" id="cardinality-opt-er" value="cardinality-opt-er"> <label for="cardinality-opt-er">ER</label><br>
                                    <input type="checkbox" id="text-cardinality" checked> <label for="text-cardinality" checked>Add verbal notation</label>
                                </p>
                            </div>
                            <div class="col-xs-6">
                                <p>First Order Logique</p>
                                <p>
                                    <input type="checkbox" name="fol" id="fol" value="fol">  <label for="fol">Add FOL notation</label><br>
                                </p>
                            </div>
                        </div>
                        <hr>
                        <p class="text-muted small">Example of what will be added to the properties in the document</p>
                        <div class="row">
                            <div class="col-xs-4">
                                <p>Quantification:</p>
                                <p id="example-fol-label">In First Order Logic:</p>
                            </div>
                            <div class="col-xs-8">
                                <p id="example-cardinality">one to many (0,n:0,1)</p>
                                <p id="example-fol">P1(x,y) ⇒ C1(x)<br>P1(x,y) ⇒ C2(y)<br>P1(x,y) ⇒ P2(x,y)</p>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        <button type="button" data-value="{{ namespace.id }}" class="btn btn-primary btn-export"><i class="fas fa-file-alt"></i> Export docx</button>
                        <button type="button" class="btn btn-primary btn-export-disabled" disabled="disabled"><i class="fas fa-cog fa-spin"></i> Export docx</button>
                    </div>
                </div><!-- /.modal-content -->
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
        <ul class="nav nav-tabs">
            <li class="active"><a data-toggle="tab" href="#summary">Summary</a></li>
            <li><a data-toggle="tab" href="#identification">Identification</a></li>
            <li><a data-toggle="tab" href="#definition">Definition</a></li>
            <li><a data-toggle="tab" href="#namespace-hierarchy">Versions</a></li>
            {% if namespace.isTopLevelNamespace and namespace.projectForTopLevelNamespace.permissionForUser(app.user) == 1 %}
            <li><a data-toggle="tab" href="#identifiers">Identifiers</a></li>
            {% endif %}
            {% if not namespace.isTopLevelNamespace %}
                <li><a data-toggle="tab" href="#classes">Classes</a></li>
                <li><a data-toggle="tab" href="#properties">Properties</a></li>
                <li><a data-toggle="tab" href="#relations">Relations</a></li>
                <li><a data-toggle="tab" href="#notes">Notes</a></li>
                <li><a data-toggle="tab" href="#graph">Graph</a></li>
            {% endif %}
            <li><a data-toggle="tab" href="#comments" class="updateViewComment" data-id="{{ namespace.id }}" data-object="namespace">Comments</a></li>
            {% set hasMismatches = false %}
            {% if not namespace.isTopLevelNamespace %}
                {% for classAssociation in namespace.classAssociations if classAssociation.parentClassNamespace.id not in namespace.selectedNamespacesId or classAssociation.childClassNamespace.id not in namespace.selectedNamespacesId %}{% set hasMismatches = true %}{% endfor %}
                {% for propertyAssociation in namespace.propertyAssociations if propertyAssociation.parentPropertyNamespace.id not in namespace.selectedNamespacesId or propertyAssociation.childPropertyNamespace.id not in namespace.selectedNamespacesId %}{% set hasMismatches = true %}{% endfor %}
                {% for property in namespace.properties if property.propertyVersionForDisplay(namespace).domainNamespace is not null and property.propertyVersionForDisplay(namespace).domainNamespace.id not in namespace.selectedNamespacesId or property.propertyVersionForDisplay(namespace).rangeNamespace is not null and property.propertyVersionForDisplay(namespace).rangeNamespace.id not in namespace.selectedNamespacesId %}{% set hasMismatches = true %}{% endfor %}
                {% for entityAssociation in namespace.entityAssociations if entityAssociation.sourceNamespaceForVersion.id not in namespace.selectedNamespacesId or entityAssociation.targetNamespaceForVersion.id not in namespace.selectedNamespacesId %}{% set hasMismatches = true %}{% endfor %}
                {% if hasMismatches %}
                    <li><a data-toggle="tab" href="#mismatches" class="text-danger"><i class="fas fa-exclamation-triangle"></i> Mismatches</a></li>
                {% endif %}
            {% endif %}
        </ul>

        <div class="tab-content">
            <div id="summary" class="tab-pane fade in active">
                <h3>{{ namespace }}</h3>
                <div class="container">
                    {% if hasMismatches %}
                        <div class="row">
                            <div class="col-lg-2">
                                <p class="text-danger"><i class="fas fa-exclamation-triangle"></i> Warning:</p>
                            </div>
                            <div class="col-lg-10">
                                <p class="text-danger">This namespace has mismatched relations due to a misconfiguration of your reference spaces. See <a data-toggle="tab" href="#mismatches">'Mismatches"</a> tab.</p>
                            </div>
                        </div>
                    {% endif %}
                    <div class="row">
                        <div class="col-lg-2">
                            <p>Description:</p>
                        </div>
                        <div class="col-lg-10">
                            {% set description, break = null, false %}
                            {% for textProperty in namespace.textProperties if textProperty.systemType.id == 16 %}
                                {% if not break %}
                                    {% if textProperty.languageIsoCode == 'en' %}
                                        {% set break = true %}
                                        {% set description = textProperty.textProperty %}
                                    {% else %}
                                        {% if description == null %}
                                            {% set description = textProperty.textProperty %}
                                        {% endif %}
                                    {% endif %}
                                {% endif %}
                            {% endfor %}

                            {% if description is not null %}
                                {{ description|raw }}
                            {% else %}
                                <p><i>No description yet.</i></p>
                            {% endif %}
                        </div>
                    </div>
                    {% if not namespace.isTopLevelNamespace %}
                        <div class="row">
                            <div class="col-lg-2">
                                <p>Status:</p>
                            </div>
                            <div class="col-lg-10">
                                {% if namespace.isOngoing %}
                                    Ongoing
                                {% endif %}
                                {% if (namespace.publishedAt is not null and namespace.deprecatedAt is null) or not namespace.isOngoing %}
                                    Published
                                {% endif %}
                                {% if namespace.deprecatedAt is not null %}
                                    Deprecated
                                {% endif %}
                            </div>
                        </div>
                    {% endif %}
                    {% if namespace.directReferencedNamespaces|length > 0 %}
                        <div class="row">
                            <div class="col-lg-2">
                                <p>Reference namespace{% if namespace.directReferencedNamespaces|length > 1 %}s{% endif %}:</p>
                            </div>
                            <div class="col-lg-10">
                                {% for referencedNamespace in namespace.allReferencedNamespaces %}
                                    <p><a href="{{ path('namespace_show', {
                                            'id': referencedNamespace.id
                                        }) }}">
                                            {{ referencedNamespace }}
                                        </a>
                                    </p>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}

                    {# Internal notes #}
                    {% set canSeeInternalNotes = false %}
                    {% if app.user is not null %}
                        {% for userProjectAssociation in namespace.projectForTopLevelNamespace.userProjectAssociations
                            if userProjectAssociation.user.id == app.user.id and userProjectAssociation.permission <= 3 %}
                            {# Seuls les admins et managers du projet peuvent voir les internal notes #}
                            {% set canSeeInternalNotes = true %}
                        {% endfor %}
                    {% endif %}
                    {% if canSeeInternalNotes and namespace.textProperties|filter(v => v.systemType.id == 33)|length > 0 %}
                        <div class="row">
                            <div class="col-lg-2">
                                <p>Internal notes:</p>
                            </div>
                            <div class="col-lg-10">
                                {% for textProperty in namespace.textProperties|filter(v => v.systemType.id == 33) %}
                                    {{ textProperty.textProperty|raw }}
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}

                    {% if not namespace.isTopLevelNamespace %}
                        <div class="row">
                            <div class="col-lg-2">
                                <p>Contributors:</p>
                            </div>
                            <div class="col-lg-10">
                                {% set contributors, break = null, false %}
                                {% for textProperty in namespace.textProperties if textProperty.systemType.id == 2 %}
                                    {% if not break %}
                                        {% if textProperty.languageIsoCode == 'en' %}
                                            {% set break = true %}
                                            {% set contributors = textProperty.textProperty %}
                                        {% else %}
                                            {% if contributors == null %}
                                                {% set contributors = textProperty.textProperty %}
                                            {% endif %}
                                        {% endif %}
                                    {% endif %}
                                {% endfor %}

                                {% if contributors is not null %}
                                    {{ contributors|raw }}
                                {% else %}
                                    <p><i>No contributors yet.</i></p>
                                {% endif %}
                            </div>
                        </div>
                        {% if not namespace.isOngoing %}
                            <div class="row">
                                <div class="col-lg-2">
                                    <p>Version:</p>
                                </div>
                                <div class="col-lg-10">
                                    {% set versionInfo, break = null, false %}
                                    {% for textProperty in namespace.textProperties if textProperty.systemType.id == 31 %}
                                        {% if not break %}
                                            {% if textProperty.languageIsoCode == 'en' %}
                                                {% set break = true %}
                                                {% set versionInfo = textProperty.textProperty %}
                                            {% else %}
                                                {% if versionInfo == null %}
                                                    {% set versionInfo = textProperty.textProperty %}
                                                {% endif %}
                                            {% endif %}
                                        {% endif %}
                                    {% endfor %}

                                    {% if versionInfo is not null %}
                                        {{ versionInfo|raw }}
                                    {% else %}
                                        <p><i>No version set yet.</i></p>
                                    {% endif %}
                                </div>
                            </div>
                        {% endif %}
                    {% endif %}
                </div>
            </div>
            {% set countValidationsTxtp = 0 %}
            {% set countValidationsLbl = 0 %}
            {% set countValidationsContributors = 0 %}
            {% set countValidationsVersion = 0 %}
            <div id="definition" class="tab-pane fade">
                <div class="pull-right add-div">
                    <a href="{{ path('text_property_new', {'type': 'definition', 'object': 'namespace', 'objectId': namespace.id })}}"
                       class="btn btn-primary pull-right">
                        Add <span class="fa fa-plus-circle"></span>
                    </a>
                </div>
                <h3>Description</h3>
                <table class="table table-striped" id="descriptions-table">
                    <thead>
                    <tr>
                        <th>Show</th>
                        <th>Description</th>
                        <th>Language</th>
                        <th>Edit</th>
                        <th>Comments</th>
                        {% if namespace.isOngoing %}
                        <th>Validation</th>
                        {% endif %}
                    </tr>
                    </thead>
                    <tbody>
                    {% for textProperty in namespace.textProperties if textProperty.systemType.id == 16 %}
                        {{ include('textProperty/modal.html.twig', { 'modalId': textProperty.id }) }}
                        <tr>
                            <td><a class="btn" href="#" data-toggle="modal" data-target="#modal-text-property-{{ textProperty.id }}"><span class="glyphicon glyphicon-eye-open" aria-hidden="true"></span></a></td>
                            <td class="truncated-text">
                                <span>{{ textProperty.textProperty|striptags|raw }}</span>
                            </td>
                            <td>{{ textProperty.languageIsoCode}}</td>
                            <td>
                                <a href="{{ path('text_property_edit', {
                                    'id': textProperty.id
                                }) }}"
                                   class="btn btn-xs btn-success">
                                    <span class="fa fa-edit"></span>
                                </a>
                            </td>
                            <td>
                                <a class="btn" href="{{ path('text_property_edit', {
                                    'id': textProperty.id
                                }) }}#comments">
                                    <span class="badge {% if textProperty.comments|length > 0  %}progress-bar-danger {% endif %}">{{ textProperty.comments|length }}</span>
                                </a>
                            </td>
                            {% if namespace.isOngoing %}
                            <td>
                                {% if textProperty.validationStatus is null %}
                                    <span class="label label-info">
                                        Candidate
                                    </span>
                                {% elseif textProperty.validationStatus.id == 26  %}
                                    <span class="label label-success">
                                        {{ textProperty.validationStatus }}
                                        {% set countValidationsTxtp = countValidationsTxtp + 1 %}
                                    </span>
                                {% elseif textProperty.validationStatus.id == 27  %}
                                    <span class="label label-danger">
                                        {{ textProperty.validationStatus }}
                                    </span>
                                {% elseif textProperty.validationStatus.id == 28  %}
                                    <span class="label label-warning">
                                        {{ textProperty.validationStatus }}
                                    </span>
                                {% endif %}
                            </td>
                            {% endif %}
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
                {% if not namespace.isTopLevelNamespace %}
                    {% set txtpContributors, break = null, false %}
                    {% for textProperty in namespace.textProperties if textProperty.systemType.id == 2 %}
                        {% if not break %}
                            {% if textProperty.languageIsoCode == 'en' %}
                                {% set break = true %}
                                {% set txtpContributors = textProperty %}
                            {% else %}
                                {% if txtpContributors == null %}
                                    {% set txtpContributors = textProperty %}
                                {% endif %}
                            {% endif %}
                        {% endif %}
                    {% endfor %}
                    <h3>Contributors
                        {% if txtpContributors is not null %}
                            <a href="{{ path('text_property_edit', {'id': txtpContributors.id}) }}" class="btn btn-xs btn-success">
                                <span class="fa fa-edit"></span>
                            </a>
                        {% else %}
                            <a href="{{ path('text_property_new', {'type': 'dct:contributor', 'object': 'namespace', 'objectId': namespace.id })}}"
                               class="btn btn-primary btn-xs">
                                New <span class="fa fa-plus-circle"></span>
                            </a>
                        {% endif %}
                    </h3>

                    {% if txtpContributors is not null %}
                        {{ txtpContributors.textProperty|raw }}
                        {% if txtpContributors.validationStatus is null %}
                            <span class="label label-info">
                                Candidate
                            </span>
                        {% elseif txtpContributors.validationStatus.id == 26  %}
                            <span class="label label-success">
                                {{ txtpContributors.validationStatus }}
                                {% set countValidationsContributors = countValidationsContributors + 1 %}
                            </span>
                        {% elseif txtpContributors.validationStatus.id == 27  %}
                            <span class="label label-danger">
                                {{ txtpContributors.validationStatus }}
                            </span>
                        {% elseif txtpContributors.validationStatus.id == 28  %}
                            <span class="label label-warning">
                                {{ txtpContributors.validationStatus }}
                            </span>
                        {% endif %}
                    {% else %}
                        <p><i>No contributors yet.</i></p>
                    {% endif %}
                {% endif %}
                <div class="pull-right add-div">
                    <a href="{{ path('text_property_new', {'type': 'internal-note', 'object': 'namespace', 'objectId': namespace.id })}}"
                       class="btn btn-primary pull-right">
                        Add <span class="fa fa-plus-circle"></span>
                    </a>
                </div>
                <h3>Internal notes</h3>
                <table class="table table-striped" id="additional-notes-table">
                    <thead>
                    <tr>
                        <th>Show</th>
                        <th>Notes</th>
                        <th>Language</th>
                        <th>Edit</th>
                        <th>Comment</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for textProperty in namespace.textProperties
                        if textProperty.systemType.id == 33 %}
                    {{ include('textProperty/modal.html.twig', { 'modalId': textProperty.id }) }}
                        <tr>
                            <td><a class="btn" href="#" data-toggle="modal" data-target="#modal-text-property-{{ textProperty.id }}"><span class="glyphicon glyphicon-eye-open" aria-hidden="true"></span></a></td>
                            <td class="truncated-text">
                                <span>{{ textProperty.textProperty|striptags|raw }}</span>
                            </td>
                            <td>{{ textProperty.languageIsoCode}}</td>
                            <td>
                                <a href="{{ path('text_property_edit', {
                                    'id': textProperty.id
                                }) }}"
                                   class="btn btn-xs btn-success">
                                    <span class="fa fa-edit"></span>
                                </a>
                            </td>
                            <td>
                                <a class="btn" href="{{ path('text_property_edit', {
                                    'id': textProperty.id
                                }) }}#comments">
                                    <span class="badge {% if textProperty.comments|length > 0  %}progress-bar-danger {% endif %}">{{ textProperty.comments|length }}</span>
                                </a>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
            <div id="identification" class="tab-pane fade">
                <h3>Identification</h3>
                <div class="object-identification-edit-form">
                    {% if is_granted('full_edit', namespace) and (not namespace.isOngoing or namespace.topLevelNamespace.isExternalNamespace) %}
                        {{ form_start(namespaceForm) }}
                        {{ form_errors(namespaceForm) }}
                        {% if namespace.isTopLevelNamespace %}
                            {{ form_row(namespaceForm.isExternalNamespace, {
                                help: 'Only tick this checkbox if your namespace already has its URI outside OntoME. Otherwise leave it unchecked.'
                            }) }}
                            {{ form_row(namespaceForm.uriGenerator, {
                                help: 'Fill this field to generate automatically the namespace URI. Eg. "my namespace" generates "https://ontome.net/ns/my-namespace".'
                            }) }}
                            {{ form_row(namespaceForm.namespaceURI) }}
                            {{ form_row(namespaceForm.rootNamespacePrefix) }}
                        {% else %}
                            {{ form_row(namespaceForm.namespaceURI, {
                                help: 'Leave blank if identical to the base URI of the root namespace.'
                            }) }}
                        {% endif %}
                        <button type="submit" class="btn btn-primary" formnovalidate>Save <span class="far fa-save"></span></button>
                        <a href="#"
                           onclick="window.location.reload()"
                           class="btn btn-default"
                           role="button">
                            Reset <i class="fas fa-undo"></i>
                        </a>
                        <a href="{{ path('namespace_show', {
                            id: namespace.id,
                            '_fragment': 'identification'
                        }) }}"
                           class="btn btn-default"
                           role="button">
                            Back <i class="fas fa-arrow-left"></i>
                        </a>
                        {{ form_end(namespaceForm) }}
                    {% else %}
                        {% if namespace.topLevelNamespace.isExternalNamespace and namespace.namespaceURI is not null %}
                            Base URI: <strong>{{ namespace.namespaceURI }}</strong>
                        {% else %}
                            Base URI: <strong>{{ namespace.topLevelNamespace.namespaceURI }}</strong>
                        {% endif %}
                    {% endif %}
                </div>
                {% if namespace.projectForTopLevelNamespace is not null %}
                    <p>
                        Project of belonging: <a href="{{ path('project_show', {
                            'id': namespace.projectForTopLevelNamespace.id
                        }) }}"
                                                 target="_blank">{{ namespace.projectForTopLevelNamespace }}
                        </a>
                    </p>
                {% endif %}


                {% if namespace.isOngoing %}
                    <p><input type="checkbox" id="make-visible" data-url="{{ path('namespace_make_visible', {'id': namespace.id }) }}" {% if namespace.isVisible %}checked="checked" disabled{% endif %} /> Make the classes and properties of this namespace visible to everyone</p>
                    <!-- Once the classes and properties of an ongoing namespace are made visible to everyone, it's not possible to hide them again or to create new ones that would be hidden. Do you wish to proceed? -->
                {% endif %}
                {% if namespace.isTopLevelNamespace == false %}
                    {% if namespace.isOngoing %}
                        <p>This namespace is ongoing and can be modified at any time. It is not advisable to use its classes and properties.</p>
                        {% set txtpVersion, break = null, false %}
                        {% for textProperty in namespace.textProperties if textProperty.systemType.id == 31 %}
                            {% if not break %}
                                {% if textProperty.languageIsoCode == 'en' %}
                                    {% set break = true %}
                                    {% set txtpVersion = textProperty %}
                                {% else %}
                                    {% if txtpVersion == null %}
                                        {% set txtpVersion = textProperty %}
                                    {% endif %}
                                {% endif %}
                            {% endif %}
                        {% endfor %}
                        <h4>Version info
                            {% if txtpVersion is not null %}
                                <a href="{{ path('text_property_edit', {'id': txtpVersion.id}) }}" class="btn btn-xs btn-success">
                                    <span class="fa fa-edit"></span>
                                </a>
                            {% else %}
                                <a href="{{ path('text_property_new', {'type': 'owl:versionInfo', 'object': 'namespace', 'objectId': namespace.id })}}"
                                   class="btn btn-primary btn-xs">
                                    New <span class="fa fa-plus-circle"></span>
                                </a>
                            {% endif %}
                        </h4>

                        {% if txtpVersion is not null %}
                            {{ txtpVersion.textProperty|raw }}
                            <p>
                                {% if txtpVersion.validationStatus is null %}
                                    <span class="label label-info">
                                Candidate
                            </span>
                                {% elseif txtpVersion.validationStatus.id == 26  %}
                                    <span class="label label-success">
                                {{ txtpVersion.validationStatus }}
                                        {% set countValidationsVersion = countValidationsVersion + 1 %}
                            </span>
                                {% elseif txtpVersion.validationStatus.id == 27  %}
                                    <span class="label label-danger">
                                {{ txtpVersion.validationStatus }}
                            </span>
                                {% elseif txtpVersion.validationStatus.id == 28  %}
                                    <span class="label label-warning">
                                {{ txtpVersion.validationStatus }}
                            </span>
                                {% endif %}
                            </p>
                        {% else %}
                            <p><i>No version set yet.</i></p>
                        {% endif %}

                        {% for textProperty in namespace.textProperties if textProperty.systemType.id == 16 %}
                            {% if textProperty.validationStatus is not null and textProperty.validationStatus.id == 26 %}
                                {% set countValidationsTxtp = countValidationsTxtp + 1 %}
                            {% endif %}
                        {% endfor %}

                        {% for textProperty in namespace.textProperties if textProperty.systemType.id == 2 %}
                            {% if textProperty.validationStatus is not null and textProperty.validationStatus.id == 26 %}
                                {% set countValidationsContributors = countValidationsContributors + 1 %}
                            {% endif %}
                        {% endfor %}

                        {% for textProperty in namespace.textProperties if textProperty.systemType.id == 31 %}
                            {% if textProperty.validationStatus is not null and textProperty.validationStatus.id == 26 %}
                                {% set countValidationsVersion = countValidationsVersion + 1 %}
                            {% endif %}
                        {% endfor %}

                        {% for label in namespace.labels %}
                            {% if label.validationStatus is not null and label.validationStatus.id == 26 %}
                                {% set countValidationsLbl = countValidationsLbl + 1 %}
                            {% endif %}
                        {% endfor %}
                        {% if hasChanged %}
                            {% if is_granted('publish', namespace)  and countValidationsTxtp > 0 and countValidationsLbl > 0 and countValidationsContributors > 0 and countValidationsVersion > 0 %}
                                <p>
                                    <a href="{{ path('namespace_publication', {
                                        id: namespace.id
                                    }) }}"
                                       class="btn btn-success"
                                       role="button">
                                        Publish this namespace <i class="fas fa-upload"></i>
                                    </a>
                                </p>
                            {% else %}
                                <p><button disabled="disabled">Publish this namespace <i class="fas fa-upload"></i></button></p>
                            {% endif %}
                        {% else %}
                            <p>You cannot publish this namespace for the moment because it is identical to the last publicated version.</p>
                        {% endif %}
                    {% endif %}

                    {% if namespace.publishedAt is not null %}
                        <p>Namespace published and available since: {{ namespace.publishedAt|date('Y-m-d') }}</p>
                    {% endif %}
                {% else %}
                    <p>This namespace is a root namespace. Find all its versions in the <a href="#namespace-hierarchy" onclick="window.location = '{{ path('namespace_edit', {'id': namespace.id}) }}#namespace-hierarchy';window.location.reload()">Versions tab</a>.</p>
                {% endif %}
                {% if not namespace.isTopLevelNamespace and namespace.isOngoing %}
                <h3 id="titleReferenceNamespace">Namespace{% if namespace.referencedNamespaceAssociations|length > 1 %}s{% endif %} to which this ongoing namespace refers</h3>
                <table class="table table-striped" id="reference-namespaces-table">
                    <thead>
                    <tr>
                        <th>Namespace</th>
                        <th>Change</th>
                        <th>Remove</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for referencedNamespace in namespace.directReferencedNamespaces %}
                        <tr>
                            <td>
                                <a data-id="{{ referencedNamespace.id }}" href="{{ path('namespace_show', {
                                    'id': referencedNamespace.id
                                }) }}">
                                    {{ referencedNamespace }}
                                </a>
                                {% if referencedNamespace.directReferencedNamespaces|length > 0 %}
                                    <div class="small text-muted"><strong><em>Referenced:</em></strong></div>
                                    <ul>
                                        {% for referencedReferencedNamespace in referencedNamespace.allReferencedNamespaces %}
                                            <li class="list-unstyled" style="border-left: 3px solid darkgrey; padding-left: 5px;">
                                                <em><a href="{{ path('namespace_show', {'id': referencedReferencedNamespace.id}) }}">{{ referencedReferencedNamespace }}</a></em>
                                            </li>
                                        {% endfor %}
                                    </ul>
                                {% endif %}
                            </td>
                            <td>
                                {% if referencedNamespace.topLevelNamespace.childVersions|length > 1 and referencedNamespace in namespace.directReferencedNamespaces %}
                                    <a href="#identification" class="change-version btn btn-xs btn-primary" data-id="{{ referencedNamespace.id }}"><i class="fas fa-exchange-alt"></i> Change version</a>
                                {% endif %}
                            </td>
                            {# Existe-t-il une association avec cette reference #}
                            {% set warningPopupDisplay = "false" %}
                            {% for classAssociation in namespace.classAssociations if classAssociation.parentClassNamespace.id == referencedNamespace.id or classAssociation.childClassNamespace.id == referencedNamespace.id %}{% set warningPopupDisplay = "true" %}{% endfor %}
                            {% for propertyAssociation in namespace.propertyAssociations if propertyAssociation.parentPropertyNamespace.id == referencedNamespace.id or propertyAssociation.childPropertyNamespace.id == referencedNamespace.id %}{% set warningPopupDisplay = "true" %}{% endfor %}
                            {% for property in namespace.properties if property.propertyVersionForDisplay(namespace).domainNamespace is not null and property.propertyVersionForDisplay(namespace).domainNamespace.id == referencedNamespace.id or property.propertyVersionForDisplay(namespace).rangeNamespace is not null and property.propertyVersionForDisplay(namespace).rangeNamespace.id == referencedNamespace.id %}{% set warningPopupDisplay = "true" %}{% endfor %}
                            {% for entityAssociation in namespace.entityAssociations if entityAssociation.sourceNamespaceForVersion.id == referencedNamespace.id or entityAssociation.targetNamespaceForVersion.id == referencedNamespace.id %}{% set warningPopupDisplay = "true" %}{% endfor %}
                            <td>
                                <a href="#identification" class="remove-namespace btn btn-xs btn-danger" data-id="{{ referencedNamespace.id }}" data-bool-popup="{{ warningPopupDisplay }}"><i class="far fa-times-circle"></i> Remove</a><span class="loading-icon2" data-id="{{ referencedNamespace.id }}">&nbsp;<span class="fas fa-spinner fa-spin"></span></span>
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>

                <h4>Pick a reference namespace</h4>
                <p>Please note that if the selected version is ongoing, it might be modified at any time and you will not be able to publish your namespace as long as you have selected it.</p>
                <div class="row">
                    <div class="col-sm-6">
                        <select id="select-root-namespace">
                            <option></option> <!-- For placeholder -->
                            {% for rootNamespace in rootNamespaces if rootNamespace.id != namespace.topLevelNamespace.id %}
                                {% if rootNamespace.childVersions|length > 1 or (rootNamespace.childVersions|length == 1 and ((rootNamespace.childVersions|first).isVisible) or rootNamespace.projectForTopLevelNamespace.userProjectAssociations|filter(v => v.user.id == app.user.id)|length == 1) %}
                                <option value="{{ rootNamespace.id }}">{{ rootNamespace.standardLabel }}</option>
                                {% endif %}
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-sm-6">
                        <div id="loading-icon">
                            <span class="fas fa-spinner fa-spin"></span>
                        </div>
                        <ul class="list-group" id="chosable-namespaces-list">
                        </ul>
                    </div>
                </div>
                <div class="pull-right add-div">
                    <a href="{{ path('label_new', {'object': 'namespace', 'objectId': namespace.id })}}"
                       class="btn btn-primary pull-right">
                        Add <span class="fa fa-plus-circle"></span>
                    </a>
                </div>
                {% endif %}

                <h3>Labels</h3>
                <table class="table table-striped" id="labels-table">
                    <thead>
                    <tr>
                        <th>Label</th>
                        <th>Language</th>
                        <th>Last updated</th>
                        <th>Edit</th>
                        <th>Comments</th>
                        <th>Validation</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for label in namespace.labels %}
                        <tr>
                            <td>
                                <a href="{{ path('label_show', {
                                    'id': label.id
                                }) }}">
                                    {{ label.label }}
                                </a> {% if label.isStandardLabelForLanguage %}*{% endif %}
                            </td>
                            <td>{{ label.languageIsoCode}}</td>
                            <td>{{ label.modificationTime|date('Y-m-d') }}</td>
                            <td>
                                <a href="{{ path('label_edit', {
                                    'id': label.id
                                }) }}"
                                   class="btn btn-xs btn-success">
                                    <span class="fa fa-edit"></span>
                                </a>
                            </td>
                            <td>
                                <a class="btn" href="{{ path('label_edit', {
                                    'id': label.id
                                }) }}#comments">
                                    <span class="badge {% if label.comments|length > 0  %}progress-bar-danger {% endif %}">{{ label.comments|length }}</span>
                                </a>
                            </td>
                            <td>
                                {% if label.validationStatus is null %}
                                    <span class="label label-info">
                                        Candidate
                                    </span>
                                {% elseif label.validationStatus.id == 26  %}
                                    <span class="label label-success">
                                        {{ label.validationStatus }}
                                        {% set countValidationsLbl = countValidationsLbl + 1 %}
                                    </span>
                                {% elseif label.validationStatus.id == 27  %}
                                    <span class="label label-danger">
                                        {{ label.validationStatus }}
                                    </span>
                                {% elseif label.validationStatus.id == 28  %}
                                    <span class="label label-warning">
                                        {{ label.validationStatus }}
                                    </span>
                                {% endif %}
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
                <p>* : Standard label for this language</p>
            </div>
            <div id="namespace-hierarchy" class="tab-pane fade">
                <h3>Versions</h3>
                {% set labelRoot = "Root namespace: " %}
                {% set labelOngoing = "Ongoing namespace: " %}
                {% set labelDeprecated = "Deprecated namespace: " %}
                {% set excludeNs = null %}
                {% set ns3 = null %}
                {% if namespace.isTopLevelNamespace %}
                    {% set rootNamespace = namespace %}
                    {% set ongoingNamespace = namespace.childVersions|filter(v => v.isOngoing)|first %}
                    {% set deprecatedNamespace = namespace.childVersions|filter(v => v.deprecatedAt is not null)|first %}
                    <p>{{ namespace.standardLabel}} is a <b>root namespace</b>.</p>
                    {% set ns1 = [ongoingNamespace, labelOngoing] %}
                    {% set ns2 = [deprecatedNamespace, labelDeprecated] %}
                {% elseif namespace.isOngoing %}
                    {% set rootNamespace = namespace.topLevelNamespace %}
                    {% set deprecatedNamespace = rootNamespace.childVersions|filter(v => v.deprecatedAt is not null)|first %}
                    <p>{{ namespace.standardLabel}} is an <b>ongoing namespace</b>.</p>
                    {% set ns1 = [rootNamespace, labelRoot] %}
                    {% set ns2 = [deprecatedNamespace, labelDeprecated] %}
                {% elseif namespace.publishedAt is not null and namespace.deprecatedAt is null %}
                    {% set rootNamespace = namespace.topLevelNamespace %}
                    {% set ongoingNamespace = rootNamespace.childVersions|filter(v => v.isOngoing)|first %}
                    {% set deprecatedNamespace = rootNamespace.childVersions|filter(v => v.deprecatedAt is not null)|first %}
                    <p>{{ namespace.standardLabel}} is a <b>published namespace</b>.</p>
                    {% set ns1 = [rootNamespace, labelRoot] %}
                    {% set ns2 = [ongoingNamespace, labelOngoing] %}
                    {% set ns3 = [deprecatedNamespace, labelDeprecated] %}
                    {% set excludeNs = namespace %}
                {% else %}
                    <!--Deprecated version-->
                    {% set rootNamespace = namespace.topLevelNamespace %}
                    {% set ongoingNamespace = rootNamespace.childVersions|filter(v => v.isOngoingl)|first %}
                    <p>{{ namespace.standardLabel}} is a <b>deprecated namespace</b>.</p>
                    {% set ns1 = [rootNamespace, labelRoot] %}
                    {% set ns2 = [deprecatedNamespace, labelDeprecated] %}
                {% endif %}
                {% for ns in [ns1, ns2, ns3]|filter(v => v is not null and v[0])%}
                    {% if ns is not null %}
                        <p>{{ ns[1] }}<a href="{{ path('namespace_show', {'id': ns[0].id, '_fragment': 'namespace-hierarchy'}) }}">{{ ns[0].standardLabel }}</a></p>
                    {% endif %}
                {% endfor %}

                <h3>{% if namespace.isTopLevelNamespace or namespace.isOngoing %}Published versions{% else %}Other published versions{% endif %}</h3>
                <table class="table table-striped" id="child-namespaces-table">
                    <thead>
                    <tr>
                        <th>Namespace</th>
                        <th>Publication date</th>
                        {% if app.user.id is defined %}
                            <th>Current namespace</th>
                        {% endif %}
                    </tr>
                    </thead>
                    <tbody>
                    {% for childNamespace in rootNamespace.childVersions|filter(v => not v.isOngoing and v.deprecatedAt is null and v != excludeNs)  %}
                        <tr>
                            <td>
                                <a href="{{ path('namespace_show', {
                                    'id': childNamespace.id,
                                    '_fragment': 'namespace-hierarchy'
                                }) }}">
                                    {{ childNamespace.standardLabel }}
                                </a>
                            </td>
                            <td>{{ childNamespace.publishedAt|date('Y-m-d') }}</td>
                            {% if app.user.id is defined %}
                                <td>
                                    {% set isEnabled = false %}
                                    {% for upa in app.user.userProjectAssociations if upa.project == app.user.currentActiveProject %}
                                        {% for eupa in upa.entityUserProjectAssociations if eupa.systemType.id == 25 %}
                                            {% if eupa.namespace == childNamespace %}
                                                {% set isEnabled = true %}
                                            {% elseif eupa.namespace is not null %}
                                                {% if eupa.namespace.referencedNamespaceAssociations is not empty %}
                                                    {% for referencedNamespaceAssociation in eupa.namespace.referencedNamespaceAssociations %}
                                                        {% if referencedNamespaceAssociation.referencedNamespace == childNamespace %}
                                                            {% set isEnabled = true %}
                                                        {% endif %}
                                                    {% endfor %}
                                                {% endif %}
                                            {% endif %}
                                        {% endfor %}
                                    {% endfor %}
                                    <a href="{{ path('user_show', {'id': app.user.id, '_fragment': 'my-current-namespaces'}) }}">{% if isEnabled %}Yes{% else %}No{% endif %}</a>
                                </td>
                            {% endif %}
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
            {% if namespace.isTopLevelNamespace and namespace.projectForTopLevelNamespace.permissionForUser(app.user) == 1 %}
            <div id="identifiers" class="tab-pane fade">
                    <h3>Identifiers</h3>
                    <p id="msg-identifier-disabled-enabled">Automatic identifier management: <b>Disabled</b></p>
                    {{ form_start(namespaceIdentifiersForm) }}
                    {{ form_errors(namespaceIdentifiersForm) }}
                    <table id="table-identifiers" class="table-bordered table-condensed" style="margin-bottom: 15px;">
                        <tr>
                            <th></th>
                            <th>Prefix</th>
                            <th>Current number</th>
                            <th>Next identifier</th>
                        </tr>
                        <tr>
                            <td><b>Class</b></td>
                            <td class="text-center">{{ form_row(namespaceIdentifiersForm.classPrefix, {'attr': {'style': 'width: 100px'}}) }}</td>
                            <td class="text-center">{{ form_row(namespaceIdentifiersForm.currentClassNumber, {'attr': {'style': 'width: 100px'}, 'value': namespace.currentClassNumber|default(0) }) }}</td>
                            <td class="text-center" id="next-class-identifier"></td>
                        </tr>
                        <tr>
                            <td><b>Property</b></td>
                            <td class="text-center">{{ form_row(namespaceIdentifiersForm.propertyPrefix, {'attr': {'style': 'width: 100px'}}) }}</td>
                            <td class="text-center">{{ form_row(namespaceIdentifiersForm.currentPropertyNumber, {'attr': {'style': 'width: 100px'}, 'value': namespace.currentPropertyNumber|default(0) }) }}</td>
                            <td class="text-center" id="next-property-identifier"></td>
                        </tr>
                    </table>
                    <p id="p-btn-identifier">
                        <button type="submit" class="btn btn-primary" formnovalidate><i class="fas fa-save"></i> Save</button>
                        <button type="reset" class="btn btn-default"><i class="fas fa-undo-alt"></i> Reset</button>
                        <a class="btn" id="btn-toggle-identifiers-disable-enable"></a>
                    </p>
                    {{ form_end(namespaceIdentifiersForm) }}

                {% if namespace.topLevelNamespace.isExternalNamespace %}
                    <h3>Identifiers in URI</h3>
                    {{ form_start(namespaceUriParameterForm) }}
                    {{ form_errors(namespaceUriParameterForm) }}
                    <table id="table-identifiers-uri" class="table-bordered table-condensed" style="margin-bottom: 15px;">
                        <tr>
                            <th>URI parameter</th>
                            <th>Class URI example</th>
                            <th>Property URI example</th>
                        </tr>
                        <tr>
                            <td class="text-nowrap">{{ form_row(namespaceUriParameterForm.uriParameter) }}</td>
                            <td>{{ namespace.displayURI }}<span id="classExample">{{ namespace.uriParameterStrings.classExample }}</span></td>
                            <td>{{ namespace.displayURI }}<span id="propertyExample">{{ namespace.uriParameterStrings.propertyExample }}</span></td>
                        </tr>
                    </table>
                    <p><button type="submit" class="btn btn-primary" formnovalidate><i class="fas fa-save"></i> Save</button></p>
                    {{ form_end(namespaceUriParameterForm) }}
                    <p>So that no entity is without a URI, the URIs will be automatically pre-filled with the entity identifier, but can be freely modified.</p>
                {% endif %}
            </div>
            {% endif %}
            <div id="classes" class="tab-pane fade">
                {% if is_granted('full_edit', namespace) and app.user.currentOngoingNamespace is not null and namespace.id == app.user.currentOngoingNamespace.id %}
                    <div class="pull-right add-div">
                        <a href="{{ path('class_new', {'namespace': namespace.id}) }}" class="btn btn-primary pull-right">Add <span class="fa fa-plus-circle"></span></a>
                    </div>
                {% endif %}
                <h3>Classes</h3>
                <table class="table table-striped" id="classes-table">
                    <thead>
                    <tr>
                        <th>Identifier</th>
                        <th>Class</th>
                        <th>Last updated</th>
                        {% if namespace.isOngoing %}
                            <th>Validation status</th>
                        {% endif %}
                    </tr>
                    </thead>
                    <tbody>
                    {% for classVersion in namespace.classVersions %}
                        <tr>
                            <td>{{ classVersion.class.identifierInNamespace }}</td>
                            <td>
                                <a href="{{ path('class_show_with_version', {
                                    'id': classVersion.class.id,
                                    'namespaceFromUrlId': classVersion.namespaceForVersion.id
                                }) }}">
                                    {{ classVersion.standardLabel }}
                                </a>
                            </td>
                            <td>{{ classVersion.modificationTime|date('Y-m-d') }}</td>
                            {% if namespace.isOngoing %}
                                <td>
                                    {% if classVersion.validationStatus is null %}
                                        <span class="label label-info">
                                    Candidate
                                </span>
                                    {% elseif classVersion.validationStatus.id == 26  %}
                                        <span class="label label-success">
                                    {{ classVersion.validationStatus }}
                                </span>
                                    {% elseif classVersion.validationStatus.id == 27  %}
                                        <span class="label label-danger">
                                    {{ classVersion.validationStatus }}
                                </span>
                                    {% elseif classVersion.validationStatus.id == 28  %}
                                        <span class="label label-warning">
                                    {{ classVersion.validationStatus }}
                                </span>
                                    {% endif %}
                                </td>
                            {% endif %}
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>

            </div>
            <div id="properties" class="tab-pane fade">
                <h3>Properties</h3>
                <table class="table table-striped" id="properties-table">
                    <thead>
                    <tr>
                        <th class="text-right">Domain</th>
                        <th></th>
                        <th>Identifier</th>
                        <th class="text-center">Property</th>
                        <th></th>
                        <th>Range</th>
                        <th>Last updated</th>
                        {% if namespace.isOngoing %}
                            <th>Validation status</th>
                        {% endif %}
                    </tr>
                    </thead>
                    <tbody>
                    {% for propertyVersion in namespace.propertyVersions %}
                        <tr>
                            <td class="text-right small">
                                {% if propertyVersion.domain is not null and propertyVersion.domainNamespace is not null %}
                                    <a href="{{ path('class_show_with_version', {
                                        'id': propertyVersion.domain.id,
                                        'namespaceFromUrlId': propertyVersion.domainNamespace.id
                                    }) }}">
                                        {{ propertyVersion.domain.classVersionForDisplay(propertyVersion.domainNamespace) }}
                                    </a>
                                {% endif %}
                            </td>
                            <td class="small" style="padding-left: 30px;">
                                {% if propertyVersion.domainMinQuantifier is not null and propertyVersion.domainMaxQuantifier is not null %}
                                    ({% if  propertyVersion.domainMinQuantifier != -1 %}{{ propertyVersion.domainMinQuantifier }}{% else %}n{% endif %},{% if  propertyVersion.domainMaxQuantifier != -1 %}{{ propertyVersion.domainMaxQuantifier }}{% else %}n{% endif %})
                                {% endif %}
                            </td>
                            <td>{{ propertyVersion.property.identifierInNamespace }}</td>
                            <td class="text-center">
                                <a href="{{ path('property_show_with_version', {
                                    'id': propertyVersion.property.id,
                                    'namespaceFromUrlId': propertyVersion.namespaceForVersion.id}) }}">
                                    {{ propertyVersion.standardLabel }}
                                </a>
                            </td>
                            <td class="small" style="padding-right: 30px;">
                                {% if propertyVersion.rangeMinQuantifier is not null and propertyVersion.rangeMaxQuantifier is not null %}
                                    ({% if  propertyVersion.rangeMinQuantifier != -1 %}{{ propertyVersion.rangeMinQuantifier }}{% else %}n{% endif %},{% if  propertyVersion.rangeMaxQuantifier != -1 %}{{ propertyVersion.rangeMaxQuantifier }}{% else %}n{% endif %})
                                {% endif %}
                            </td>
                            <td class="small">
                                {% if propertyVersion.range is not null and propertyVersion.rangeNamespace is not null %}
                                    <a href="{{ path('class_show_with_version', {
                                        'id': propertyVersion.range.id,
                                        'namespaceFromUrlId': propertyVersion.rangeNamespace.id
                                    }) }}">
                                        {{ propertyVersion.range.classVersionForDisplay(propertyVersion.rangeNamespace) }}
                                    </a>
                                {% endif %}
                            </td>
                            <td>{{ propertyVersion.modificationTime|date('Y-m-d') }}</td>
                            {% if namespace.isOngoing %}
                                <td>
                                    {% if propertyVersion.validationStatus is null %}
                                        <span class="label label-info">
                                    Candidate
                                </span>
                                    {% elseif propertyVersion.validationStatus.id == 26  %}
                                        <span class="label label-success">
                                    {{ propertyVersion.validationStatus }}
                                </span>
                                    {% elseif propertyVersion.validationStatus.id == 27  %}
                                        <span class="label label-danger">
                                    {{ propertyVersion.validationStatus }}
                                </span>
                                    {% elseif propertyVersion.validationStatus.id == 28  %}
                                        <span class="label label-warning">
                                    {{ propertyVersion.validationStatus }}
                                </span>
                                    {% endif %}
                                </td>
                            {% endif %}
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
            <div id="relations" class="tab-pane fade">
                <h3>Relations</h3>
                <h4>Filter by</h4>
                <div class="form-group">
                    <div class="btn-group" id="btns-choose-entity-relations">
                        <button type="button" class="btn btn-default" value="ClassesRelation">Classes relations</button>
                        <button type="button" class="btn btn-default" value="PropertiesRelation">Properties relations</button>
                        <button type="button" class="btn btn-primary" value="">Both</button>
                    </div>
                </div>
                <div class="form-group">
                    <div class="btn-group" id="btns-choose-type-relations">
                        <button type="button" class="btn btn-default" value="HierarchyAssociation">Hierarchy</button>
                        <button type="button" class="btn btn-default" value="OtherRelation">Other relations</button>
                        <button type="button" class="btn btn-primary" value="">Both</button>
                    </div>
                </div>
                <table class="table table-striped" id="relations-table">
                    <thead>
                    <tr>
                        <th>Source</th>
                        <th>Relation</th>
                        <th>Target</th>
                        <th>Last updated</th>
                        <th>Type</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for classAssociation in namespace.classAssociations %}
                        <tr>
                            <td>{{ classAssociation.childClass.classVersionForDisplay(classAssociation.childClassNamespace) }}</td>
                            <td>
                                <a href="{{ path('class_show_with_version', {
                                    'id': classAssociation.childClass.id,
                                    'namespaceFromUrlId': classAssociation.childClassNamespace.id,
                                    '_fragment':'class-hierarchy'
                                }) }}">
                                    rdfs:subClassOf
                                </a>
                            </td>
                            <td>{{ classAssociation.parentClass.classVersionForDisplay(classAssociation.parentClassNamespace) }}</td>
                            <td>{{ classAssociation.modificationTime|date('Y-m-d') }}</td>
                            <td>ClassesRelation-HierarchyAssociation</td>
                        </tr>
                    {% endfor %}
                    {% for propertyAssociation in namespace.propertyAssociations %}
                        <tr>
                            <td>{{ propertyAssociation.childProperty.propertyVersionForDisplay(propertyAssociation.childPropertyNamespace) }}</td>
                            <td>
                                <a href="{{ path('property_show_with_version', {
                                    'id': propertyAssociation.childProperty.id,
                                    'namespaceFromUrlId': propertyAssociation.childPropertyNamespace.id,
                                    '_fragment':'property-hierarchy'
                                }) }}">
                                    rdfs:subPropertyOf
                                </a>
                            </td>
                            <td>{{ propertyAssociation.parentProperty.propertyVersionForDisplay(propertyAssociation.parentPropertyNamespace) }}</td>
                            <td>{{ propertyAssociation.modificationTime|date('Y-m-d') }}</td>
                            <td>PropertiesRelation-HierarchyAssociation</td>
                        </tr>
                    {% endfor %}
                    {% for entityAssociation in namespace.entityAssociations %}
                        <tr>
                            <td>
                                {% if entityAssociation.sourceClass is not null %}
                                    {{ entityAssociation.sourceClass.classVersionForDisplay(entityAssociation.sourceNamespaceForVersion) }}
                                {% elseif entityAssociation.sourceProperty is not null %}
                                    {{ entityAssociation.sourceProperty.propertyVersionForDisplay(entityAssociation.sourceNamespaceForVersion) }}
                                {% endif %}
                            </td>
                            <td>
                                {% if entityAssociation.sourceClass is not null %}
                                    <a href="{{ path('class_show_with_version', {
                                        'id': entityAssociation.sourceClass.id,
                                        'namespaceFromUrlId': entityAssociation.sourceNamespaceForVersion.id,
                                        '_fragment':'relations'
                                    }) }}">
                                        {{ entityAssociation.systemType.standardLabel }}
                                    </a>
                                {% elseif entityAssociation.sourceProperty is not null %}
                                    <a href="{{ path('property_show_with_version', {
                                        'id': entityAssociation.sourceProperty.id,
                                        'namespaceFromUrlId': entityAssociation.sourceNamespaceForVersion.id,
                                        '_fragment':'relations'
                                    }) }}">
                                        {{ entityAssociation.systemType.standardLabel }}
                                    </a>
                                {% endif %}
                            </td>
                            <td>
                                {% if entityAssociation.targetClass is not null %}
                                    {{ entityAssociation.targetClass.classVersionForDisplay(entityAssociation.targetNamespaceForVersion) }}
                                {% elseif entityAssociation.targetProperty is not null %}
                                    {{ entityAssociation.targetProperty.propertyVersionForDisplay(entityAssociation.targetNamespaceForVersion) }}
                                {% endif %}
                            </td>
                            <td>{{ entityAssociation.modificationTime|date('Y-m-d') }}</td>
                            <td>
                                {% if entityAssociation.sourceClass is not null %}
                                    ClassesRelation-OtherRelation
                                {% elseif entityAssociation.sourceProperty is not null %}
                                    PropertiesRelation-OtherRelation
                                {% endif %}
                            </td>
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
            <div id="notes" class="tab-pane fade">
                <h3>Notes</h3>
                <table class="table table-striped" id="notes-table">
                    <thead>
                    <tr>
                        <th>Show</th>
                        <th>Note</th>
                        <th>Type</th>
                        <th>Language</th>
                        <th>Entity</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% for textProperty in textProperties|filter(v => (is_granted('edit', v) and v.systemType.id == 33) or v.systemType.id in [34,35]) %}
                        {{ include('textProperty/modal.html.twig', { 'modalId': textProperty.id }) }}
                        <tr>
                            <td><a class="btn" href="#" data-toggle="modal" data-target="#modal-text-property-{{ textProperty.id }}"><span class="glyphicon glyphicon-eye-open" aria-hidden="true"></span></a></td>
                            <td class="truncated-text">
                                <span>{{ textProperty.textProperty|striptags|raw }}</span>
                            </td>
                            <td class="text-nowrap">{{ textProperty.systemType }}</td>
                            <td>{{ textProperty.languageIsoCode }}</td>
                            {% if textProperty.class is not null %}
                                {% set classVersion = textProperty.class.classVersions|filter(v => v.namespaceForVersion in namespace.allReferencedNamespaces or v.namespaceForVersion == namespace)|first  %}
                                {% set prefix = '' %}
                                {% if classVersion.namespaceForVersion.topLevelNamespace.rootNamespacePrefix is not null %}
                                    {% set prefix = classVersion.namespaceForVersion.topLevelNamespace.rootNamespacePrefix ~ ':' %}
                                {% endif %}
                                <td class="text-nowrap">
                                    <a href="{{ path('class_show_with_version', {
                                        'id': classVersion.class.id,
                                        'namespaceFromUrlId': classVersion.namespaceForVersion.id,
                                        '_fragment':'definition'
                                    }) }}">
                                        {{ prefix ~ classVersion.invertedLabel }}
                                    </a>
                                </td>
                            {% endif %}
                            {% if textProperty.property is not null %}
                                {% set propertyVersion = textProperty.property.propertyVersions|filter(v => v.namespaceForVersion in namespace.allReferencedNamespaces or v.namespaceForVersion == namespace)|first  %}
                                {% set prefix = '' %}
                                {% if propertyVersion.namespaceForVersion.topLevelNamespace.rootNamespacePrefix is not null %}
                                    {% set prefix = propertyVersion.namespaceForVersion.topLevelNamespace.rootNamespacePrefix ~ ':' %}
                                {% endif %}
                                <td class="text-nowrap">
                                    <a href="{{ path('property_show_with_version', {
                                        'id': propertyVersion.property.id,
                                        'namespaceFromUrlId': propertyVersion.namespaceForVersion.id,
                                        '_fragment':'definition'
                                    }) }}">
                                        {{ prefix ~ propertyVersion.invertedLabel }}
                                    </a>
                                </td>
                            {% endif %}
                        </tr>
                    {% endfor %}
                    </tbody>
                </table>
            </div>
            <div id="graph" class="tab-pane fade">
                <h3>Graph</h3>
                {% if namespace.classes|length > 0 and namespace.properties|length > 0 %}
                    <a href="https://betagraph.ontome.net/#url={{ url('namespace_json', {'id': namespace.id}) }}" target="_blank" class="btn btn-primary">Full screen (WebVOWL) <span class="fa fa-desktop"></span></a><br><br>
                    <embed src="https://betagraph.ontome.net/#url={{ url('namespace_json', {'id': namespace.id}) }}" width="100%" height="1000px"><br><br>
                    <a href="https://betagraph.ontome.net/#url={{ url('namespace_json', {'id': namespace.id}) }}" target="_blank" class="btn btn-primary">Full screen (WebVOWL) <span class="fa fa-desktop"></span></a>

                {% else %}
                    <p>The webvowl graph cannot be displayed because there is no class or property in this namespace.</p>
                {% endif %}
            </div>
            <div id="comments" class="tab-pane fade">
                <h3>Comments</h3>
                <div class="comment-box js-user-info" data-fullname="{{ app.user }}">
                    <div class="action-box">
                        {% if namespace.comments is empty %}
                            <p id="comment-not-found"><em>No comment found.</em></p>
                        {% endif %}
                        <ul id="comments-list" class="comments-list">
                            {% for comment in namespace.comments %}
                                <li>
                                    <div class="comment-text">
                                        <p><strong><a href="#">{{ comment.creator.fullName }}</a></strong></p>
                                        <p>{{ comment.comment }}</p>
                                        <span class="date sub-comment-text">on {{ comment.creationTime|date() }}</span>
                                    </div>
                                </li>
                            {% endfor %}
                        </ul>

                        {% if app.user %}
                            <div class="new-comment-form" id="new-comment-form">
                                {{ render(controller('AppBundle:Comment:new', {'object' : 'namespace', 'objectId' : namespace.id})) }}
                            </div>
                        {% endif %}
                    </div>
                </div>
            </div>
            <div id="mismatches" class="tab-pane fade">
                <h3>List of mismatches with reference namespaces</h3>
                <p>Entities listed here are not correctly associated with your <a data-toggle="tab" href="#identification">reference namespaces</a>.
                    They are displayed in red in your ongoing namespace. They may not be available in the version of the selected space.
                    Or you may not have selected any version of a <a data-toggle="tab" href="#identification">reference namespace</a>.<br>Please make the necessary corrections before proceeding.</p>
                <table class="table table-striped" id="mismatches-table">
                    <thead>
                    <tr>
                        <th>Type of relation</th>
                        <th>Entity</th>
                        <th>Namespace</th>
                        <th>Error type</th>
                    </tr>
                    </thead>
                    <tbody>
                    {% set errorType = "Missing reference namespace" %}

                    {# Premiere boucle : les hierarchies de classes - vérification des parents #}
                    {% for classAssociation in namespace.classAssociations if classAssociation.parentClassNamespace.id not in namespace.selectedNamespacesId %}
                        {% if namespace.selectedNamespacesId|length != 2 %}
                            {% set errorType = "Class not in any reference namespace" %}
                            {% if classAssociation.parentClassNamespace.id in namespace.largeSelectedNamespacesId %}
                                {% set errorType = "Class not in the selected version of the reference namespace" %}
                            {% endif %}
                        {% endif %}
                        <tr>
                            <td>
                                <a href="{{ path('class_show_with_version', {
                                    'id': classAssociation.childClass.id,
                                    'namespaceFromUrlId': classAssociation.childClassNamespace.id,
                                    '_fragment': 'class-hierarchy'
                                }) }}">hierarchy (rdfs:subclassOf)</a>
                            </td>
                            <td>{{ classAssociation.parentClass.classVersionForDisplay(classAssociation.parentClassNamespace) }}</td>
                            <td>{{ classAssociation.parentClassNamespace }}</td>
                            <td>{{ errorType }}</td>
                        </tr>
                    {% endfor %}

                    {# Deuxieme boucle : les hierarchies de classes - vérification des enfants#}
                    {% for classAssociation in namespace.classAssociations if classAssociation.childClassNamespace.id not in namespace.selectedNamespacesId %}
                        {% if namespace.selectedNamespacesId|length != 2 %}
                            {% set errorType = "Class not in any reference namespace" %}
                            {% if classAssociation.childClassNamespace.id in namespace.largeSelectedNamespacesId %}
                                {% set errorType = "Class not in the selected version of the reference namespace" %}
                            {% endif %}
                        {% endif %}
                        <tr>
                            <td>
                                <a href="{{ path('class_show_with_version', {
                                    'id': classAssociation.childClass.id,
                                    'namespaceFromUrlId': classAssociation.childClassNamespace.id,
                                    '_fragment': 'class-hierarchy'
                                }) }}">hierarchy (rdfs:subclassOf)</a>
                            </td>
                            <td>{{ classAssociation.childClass.classVersionForDisplay(classAssociation.childClassNamespace) }}</td>
                            <td>{{ classAssociation.childClassNamespace }}</td>
                            <td>{{ errorType }}</td>
                        </tr>
                    {% endfor %}

                    {# Troisieme boucle : les hierarchies de propriétés - vérification des parents #}
                    {% for propertyAssociation in namespace.propertyAssociations if propertyAssociation.parentPropertyNamespace.id not in namespace.selectedNamespacesId %}
                        {% if namespace.selectedNamespacesId|length != 2 %}
                            {% set errorType = "Property not in any reference namespace" %}
                            {% if propertyAssociation.parentPropertyNamespace.id in namespace.largeSelectedNamespacesId %}
                                {% set errorType = "Property not in the selected version of the reference namespace" %}
                            {% endif %}
                        {% endif %}
                        <tr>
                            <td>
                                <a href="{{ path('property_show_with_version', {
                                    'id': propertyAssociation.childProperty.id,
                                    'namespaceFromUrlId': propertyAssociation.childPropertyNamespace.id,
                                    '_fragment': 'property-hierarchy'
                                }) }}">hierarchy (rdfs:subpropertyOf)</a>
                            </td>
                            <td>{{ propertyAssociation.parentProperty.propertyVersionForDisplay(propertyAssociation.parentPropertyNamespace) }}</td>
                            <td>{{ propertyAssociation.parentPropertyNamespace }}</td>
                            <td>{{ errorType }}</td>
                        </tr>
                    {% endfor %}

                    {# Quatrieme boucle : les hierarchies de propriétés - vérification des enfants #}
                    {% for propertyAssociation in namespace.propertyAssociations if propertyAssociation.childPropertyNamespace.id not in namespace.selectedNamespacesId %}
                        {% if namespace.selectedNamespacesId|length != 2 %}
                            {% set errorType = "Property not in any reference namespace" %}
                            {% if propertyAssociation.childPropertyNamespace.id in namespace.largeSelectedNamespacesId %}
                                {% set errorType = "Property not in the selected version of the reference namespace" %}
                            {% endif %}
                        {% endif %}
                        <tr>
                            <td>
                                <a href="{{ path('property_show_with_version', {
                                    'id': propertyAssociation.childProperty.id,
                                    'namespaceFromUrlId': propertyAssociation.childPropertyNamespace.id,
                                    '_fragment': 'property-hierarchy'
                                }) }}">hierarchy (rdfs:subpropertyOf)</a>
                            </td>
                            <td>{{ propertyAssociation.childProperty.propertyVersionForDisplay(propertyAssociation.childPropertyNamespace) }}</td>
                            <td>{{ propertyAssociation.childPropertyNamespace }}</td>
                            <td>{{ errorType }}</td>
                        </tr>
                    {% endfor %}

                    {# Cinquieme boucle : les propriétés - vérification des domains #}
                    {% for property in namespace.properties if property.propertyVersionForDisplay(namespace).domainNamespace is not null
                        and property.propertyVersionForDisplay(namespace).domainNamespace.id not in namespace.selectedNamespacesId %}
                        {% if namespace.selectedNamespacesId|length != 2 %}
                            {% set errorType = "Class not in any reference namespace" %}
                            {% if property.propertyVersionForDisplay(namespace).domainNamespace.id in namespace.largeSelectedNamespacesId %}
                                {% set errorType = "Class not in the selected version of the reference namespace" %}
                            {% endif %}
                        {% endif %}
                        <tr>
                            <td>
                                <a href="{{ path('property_show_with_version', {
                                    'id': property.id,
                                    'namespaceFromUrlId': namespace.id,
                                    '_fragment': 'identification'
                                }) }}">domain class (rdfs:domain)</a>
                            </td>
                            <td>{{ property.propertyVersionForDisplay(namespace).domain.classVersionForDisplay(property.propertyVersionForDisplay(namespace).domainNamespace) }}</td>
                            <td>{{ property.propertyVersionForDisplay(namespace).domainNamespace }}</td>
                            <td>{{ errorType }}</td>
                        </tr>
                    {% endfor %}

                    {# Sixieme boucle : les propriétés - vérification des ranges #}
                    {% for property in namespace.properties if property.propertyVersionForDisplay(namespace).rangeNamespace is not null
                        and property.propertyVersionForDisplay(namespace).rangeNamespace.id not in namespace.selectedNamespacesId %}
                        {% if namespace.selectedNamespacesId|length != 2 %}
                            {% set errorType = "Class not in any reference namespace" %}
                            {% if property.propertyVersionForDisplay(namespace).rangeNamespace.id in namespace.largeSelectedNamespacesId %}
                                {% set errorType = "Class not in the selected version of the reference namespace" %}
                            {% endif %}
                        {% endif %}
                        <tr>
                            <td>
                                <a href="{{ path('property_show_with_version', {
                                    'id': property.id,
                                    'namespaceFromUrlId': namespace.id,
                                    '_fragment': 'identification'
                                }) }}">range class (rdfs:range)</a>
                            </td>
                            <td>{{ property.propertyVersionForDisplay(namespace).range.classVersionForDisplay(property.propertyVersionForDisplay(namespace).rangeNamespace) }}</td>
                            <td>{{ property.propertyVersionForDisplay(namespace).rangeNamespace }}</td>
                            <td>{{ errorType }}</td>
                        </tr>
                    {% endfor %}

                    {# Septième boucle : les relations - vérification des sources #}
                    {% for entityAssociation in namespace.entityAssociations if entityAssociation.sourceNamespaceForVersion.id not in namespace.selectedNamespacesId %}
                        {% if entityAssociation.sourceClass is not null %}
                            {% if namespace.selectedNamespacesId|length != 2 %}
                                {% set errorType = "Class not in any reference namespace" %}
                                {% if entityAssociation.sourceNamespaceForVersion.id in namespace.largeSelectedNamespacesId %}
                                    {% set errorType = "Class not in the selected version of the reference namespace" %}
                                {% endif %}
                            {% endif %}
                            <tr>
                                <td>
                                    <a href="{{ path('class_show_with_version', {
                                        'id': entityAssociation.targetClass.id,
                                        'namespaceFromUrlId': entityAssociation.targetNamespaceForVersion.id,
                                        '_fragment': 'relations'
                                    }) }}">{{ entityAssociation.systemType }}</a>
                                </td>
                                <td>{{ entityAssociation.sourceClass.classVersionForDisplay(entityAssociation.sourceNamespaceForVersion) }}</td>
                                <td>{{ entityAssociation.sourceNamespaceForVersion }}</td>
                                <td>{{ errorType }}</td>
                            </tr>
                        {% elseif entityAssociation.sourceProperty is not null %}
                            {% if namespace.selectedNamespacesId|length != 2 %}
                                {% set errorType = "Property not in any reference namespace" %}
                                {% if entityAssociation.sourceNamespaceForVersion.id in namespace.largeSelectedNamespacesId %}
                                    {% set errorType = "Property not in the selected version of the reference namespace" %}
                                {% endif %}
                            {% endif %}
                            <tr>
                                <td>
                                    <a href="{{ path('property_show_with_version', {
                                        'id': entityAssociation.targetProperty.id,
                                        'namespaceFromUrlId': entityAssociation.targetNamespaceForVersion.id,
                                        '_fragment': 'relations'
                                    }) }}">{{ entityAssociation.systemType }}</a>
                                </td>
                                <td>{{ entityAssociation.sourceProperty.propertyVersionForDisplay(entityAssociation.sourceNamespaceForVersion) }}</td>
                                <td>{{ entityAssociation.sourceNamespaceForVersion }}</td>
                                <td>{{ errorType }}</td>
                            </tr>
                        {% endif %}
                    {% endfor %}

                    {# Huitième boucle : les relations - vérification des targets #}
                    {% for entityAssociation in namespace.entityAssociations if entityAssociation.targetNamespaceForVersion.id not in namespace.selectedNamespacesId %}
                        {% if entityAssociation.targetClass is not null %}
                            {% if namespace.selectedNamespacesId|length != 2 %}
                                {% set errorType = "Class not in any reference namespace" %}
                                {% if entityAssociation.targetNamespaceForVersion.id in namespace.largeSelectedNamespacesId %}
                                    {% set errorType = "Class not in the selected version of the reference namespace" %}
                                {% endif %}
                            {% endif %}
                            <tr>
                                <td>
                                    <a href="{{ path('class_show_with_version', {
                                        'id': entityAssociation.sourceClass.id,
                                        'namespaceFromUrlId': entityAssociation.sourceNamespaceForVersion.id,
                                        '_fragment': 'relations'
                                    }) }}">{{ entityAssociation.systemType }}</a>
                                </td>
                                <td>{{ entityAssociation.targetClass.classVersionForDisplay(entityAssociation.targetNamespaceForVersion) }}</td>
                                <td>{{ entityAssociation.targetNamespaceForVersion }}</td>
                                <td>{{ errorType }}</td>
                            </tr>
                        {% elseif entityAssociation.targetProperty is not null %}
                            {% if namespace.selectedNamespacesId|length != 2 %}
                                {% set errorType = "Property not in any reference namespace" %}
                                {% if entityAssociation.targetNamespaceForVersion.id in namespace.largeSelectedNamespacesId %}
                                    {% set errorType = "Property not in the selected version of the reference namespace" %}
                                {% endif %}
                            {% endif %}
                            <tr>
                                <td>
                                    <a href="{{ path('property_show_with_version', {
                                        'id': entityAssociation.sourceProperty.id,
                                        'namespaceFromUrlId': entityAssociation.sourceNamespaceForVersion.id,
                                        '_fragment': 'relations'
                                    }) }}">{{ entityAssociation.systemType }}</a>
                                </td>
                                <td>{{ entityAssociation.targetProperty.propertyVersionForDisplay(entityAssociation.targetNamespaceForVersion) }}</td>
                                <td>{{ entityAssociation.targetNamespaceForVersion }}</td>
                                <td>{{ errorType }}</td>
                            </tr>
                        {% endif %}
                    {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    </section>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.4/js/select2.min.js"></script>

    <script>
        //Custom filtering function which will search data in column five, hidden in table "Relations"
        //Pour filtrer les relations Class To Class, Property To Property, etc...
        $.fn.dataTable.ext.search.push(
            function( settings, data, dataIndex ) {
                // Don't filter on anything other than "relations-table"
                if ( settings.nTable.id !== 'relations-table' ) {
                    return true;
                }
                var filterEntityRelations = $("#btns-choose-entity-relations .btn-primary").val();
                var filterTypeRelations = $("#btns-choose-type-relations .btn-primary").val();
                var filterRelations = filterEntityRelations+"-"+filterTypeRelations;
                var strForFilter = data[4]; // use data for comparaison
                return strForFilter.includes(filterRelations);
            }
        );
        $(document).ready(function() {
            $('#namespaces-table').DataTable();
            $('#labels-table').DataTable();
            var referencesTable = $('#reference-namespaces-table').DataTable({
                "columnDefs": [
                    { "width": "10%", "targets": 2 },
                    { "width": "20%", "targets": 1 },
                    { "width": "70%", "targets": 0 }
                ],
                "autoWidth": false,
                "dom": "t",
                "searching": false,
                "paging": false,
                language: {emptyTable: "No reference namespace has been specified."}
            });
            $('#descriptions-table').DataTable();
            $('#additional-notes-table').DataTable();
            $('#notes-table').DataTable({
                columnDefs: [
                    { targets: [1], width: '100%'}
                ],
                "autoWidth": false,
                initComplete: function(){
                    this.api().columns([2]).every(function(){
                        var column = this;
                        var select = $('<br><select id="notes-select" style="width:100%;"></select>')
                            .appendTo($(column.header()))
                            .on('change', function(){
                                var val = $.fn.dataTable.util.escapeRegex(
                                    $(this).val()
                                );

                                if(val == "All") {
                                    column
                                        .search(val ? 'note' : '', true, false)
                                        .draw();
                                }
                                else{
                                    column
                                        .search(val ? '^'+val+'$' : '', true, false)
                                        .draw();
                                }
                            });

                        $(select).click(function(e){
                            e.stopPropagation();
                        });

                        select.append('<option value="All">All</option>');
                        column.data().unique().sort().each(function(d, j){
                            select.append('<option value="'+d+'">'+d+'</option>');
                        });
                    });
                    var existsClassesSelectedInProfile = $("#notes-select option[value='All']").length !== 0; //détermine si cette valeur est dans le select
                    if (existsClassesSelectedInProfile) {
                        $("#notes-select").val('All').change(); //default filter on this column
                    }
                }
            });
            $('#properties-table').DataTable({
                columnDefs: [
                    { type: 'natural-ci', targets: 2, width: '1%', className: 'text-right' },
                    { targets: -1, width: '1%'}
                ],
                "autoWidth": false,
                order: [[ 3, 'asc' ]]});
            $('#classes-table').DataTable({
                columnDefs: [
                    { type: 'natural-ci', targets: 0, width: '1%', className: 'text-right' },
                    { targets: -1, width: '1%'}
                ],
                "autoWidth": false,
                order: [[ 1, 'asc' ]]});
            var tableRelations = $('#relations-table').DataTable({
                "columnDefs": [
                    { "visible": false, "targets": 4 }
                ],
                "autoWidth": false
            });
            $('#mismatches-table').DataTable();
            $('#child-namespaces-table').DataTable({
                "order": [[0, 'desc']],
                "autoWidth": false
            });

            $('#summary a[href="#mismatches"]').click(function (e) {
                e.preventDefault();
                $('.nav-tabs a[href="#mismatches"]').tab('show');
            });

            $('#mismatches a[href="#identification"]').click(function (e) {
                e.preventDefault();
                $('.nav-tabs a[href="#identification"]').tab('show');
            });

            $('#loading-icon').hide(0);
            $('.loading-icon2').hide(0);

            $('#select-root-namespace').select2({
                placeholder: "Select a reference namespace",
                width: '100%',
                sorter: function(data) {
                    /* Sort data using lowercase comparison */
                    return data.sort(function (a, b) {
                        a = a.text.toLowerCase();
                        b = b.text.toLowerCase();
                        if (a > b) {
                            return 1;
                        } else if (a < b) {
                            return -1;
                        }
                        return 0;
                    });
                }
            });

            $('#btns-choose-entity-relations .btn').on('click', function () {
                $('#btns-choose-entity-relations .btn').removeClass("btn-primary");
                $('#btns-choose-entity-relations .btn').addClass("btn-default");
                $(this).addClass("btn-primary");
                tableRelations.draw();
            });

            $('#btns-choose-type-relations .btn').on('click', function () {
                $('#btns-choose-type-relations .btn').removeClass("btn-primary");
                $('#btns-choose-type-relations .btn').addClass("btn-default");
                $(this).addClass("btn-primary");
                tableRelations.draw();
            });


            $('#select-root-namespace').on('select2:select', function (e) {
                $('#loading-icon').show(0);
                $('#chosable-namespaces-list').empty();
                var selectedValue = e.params.data.id;
                var url = '{{ path("namespaces_by_root_id_list_json", {'id': 'selectedValue'}) }}';
                url = url.replace("selectedValue", selectedValue);
                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: 'json',
                    success:function(data){
                        $('#loading-icon').hide(0);

                        // handling the response data from the controller
                        if(data.status == 'Error'){
                            console.log("[API] ERROR: "+data.message);
                        }
                        if(data.status == 'Success'){
                            $.each(data.namespaces, function(key, val){
                                $("#chosable-namespaces-list").append($("<a class=\"list-group-item pickable-namespace\" id="+val.id+">"+val.standardLabel+"</a>"));
                            });
                        }
                    }
                });
            });

            $(document).on("mouseenter touchstart", ".pickable-namespace", function() {
                $(this).prepend($("<span><i class=\"fas fa-plus\"></i>&nbsp;</span>"));
            });

            $(document).on("mouseleave touchend", ".pickable-namespace", function() {
                $(this).find(":first-child").remove();
            });

            $(document).on("click", ".pickable-namespace", function() {
                var selectedValue = $(this).attr("id");
                var namespaceID = {{ namespace.id }}
                var url = '{{ path("namespace_referenced_namespace_association", {'namespace' : 'namespaceID','referencedNamespace': 'selectedValue'}) }}';
                url = url.replace("namespaceID", namespaceID);
                url = url.replace("selectedValue", selectedValue);
                $.ajax({
                    url: url,
                    type: 'POST',
                    dataType: 'json',
                    success:function(data){
                        // handling the response data from the controller
                        if(data.status == 'Error'){
                            console.log("[API] ERROR: "+data.message);
                        }
                        if(data.status == 'Success'){
                            window.location.reload();
                        }
                    }
                });
            });

            $(document).on('change', '#make-visible', function(){
                var url =  $(this).data("url");
                var cbx = $(this);
                if(this.checked){
                    bootbox.confirm({
                        message: "Once the classes and properties of an ongoing namespace are made visible to everyone, it's not possible to hide them again or to create new ones that would be hidden. Do you wish to proceed?",
                        buttons: {
                            confirm: {
                                label: 'Yes',
                                className: 'btn-success'
                            },
                            cancel: {
                                label: 'No',
                                className: 'btn-danger'
                            }
                        },
                        callback: function (result) {
                            if(result){
                                $.ajax({
                                    url: url,
                                    type: 'POST',
                                    dataType: 'json',
                                    success: function (data) {
                                        cbx.attr('disabled', 'disabled');
                                    }
                                });
                            }
                            else{
                                cbx.prop('checked', false);
                            }
                        }
                    });
                }
            });

            $(document).on("click", ".remove-namespace", function() {
                var selectedValue = $(this).data("id");
                var boolPopup = $(this).attr("data-bool-popup");

                var namespaceID = {{ namespace.id }}

                if(boolPopup == "true"){
                    bootbox.confirm({
                        message: "Classes and properties belonging to the reference namespace you wish to deselect are associated with your ongoing namespace. Be aware that the associations involved will no longer be valid.<br><br>Do you wish to proceed?",
                        title: '<i class="fas fa-exclamation-triangle"></i> Warning',
                        buttons: {
                            confirm: {
                                label: 'Yes',
                                className: 'btn-success'
                            },
                            cancel: {
                                label: 'No',
                                className: 'btn-danger'
                            }
                        },
                        callback: function (result) {
                            if(result){
                                $(".loading-icon2[data-id='"+selectedValue+"']").show(0);
                                var url = '{{ path("namespace_referenced_namespace_disassociation", {'namespace' : 'namespaceID','referencedNamespace': 'selectedValue'}) }}';
                                url = url.replace("namespaceID", namespaceID);
                                url = url.replace("selectedValue", selectedValue);
                                $.ajax({
                                    url: url,
                                    type: 'DELETE',
                                    dataType: 'json',
                                    success:function(data){
                                        window.location.reload();
                                    }
                                });
                            }
                        }
                    });
                }
                else{
                    $(".loading-icon2[data-id='"+selectedValue+"']").show(0);
                    var url = '{{ path("namespace_referenced_namespace_disassociation", {'namespace' : 'namespaceID','referencedNamespace': 'selectedValue'}) }}';
                    url = url.replace("namespaceID", namespaceID);
                    url = url.replace("selectedValue", selectedValue);
                    $.ajax({
                        url: url,
                        type: 'DELETE',
                        dataType: 'json',
                        success:function(data){
                            window.location.reload();
                        }
                    });
                }
            });

            $(document).on("click", ".change-version", function(){
                btn = $(this);
                var selectedValue = $(this).data("id");
                var namespaceID = {{ namespace.id }}

                    bootbox.confirm({
                        message: "Changing the version of a reference namespace changes the association of all target entities in that namespace to the new version. Errors may occur.<br><br>Please also note if the selected version is ongoing, it might be modified at any time and you will not be able to publish your namespace as long as you have selected it.<br><br>Do you wish to proceed?",
                        title: '<i class="fas fa-exclamation-triangle"></i> Warning',
                        buttons: {
                            confirm: {
                                label: 'Yes',
                                className: 'btn-success'
                            },
                            cancel: {
                                label: 'No',
                                className: 'btn-danger'
                            }
                        },
                        callback: function (result) {
                            if(result){
                                cell = btn.parent();
                                btn.remove();
                                cell.append("<select class='select-change-version' data-id='"+selectedValue+"'></select>");

                                $('.select-change-version[data-id='+selectedValue+']').select2({
                                    width: '100%',
                                    sorter: function(data) {
                                        /* Sort data using lowercase comparison */
                                        return data.sort(function (a, b) {
                                            a = a.text.toLowerCase();
                                            b = b.text.toLowerCase();
                                            if (a > b) {
                                                return 1;
                                            } else if (a < b) {
                                                return -1;
                                            }
                                            return 0;
                                        });
                                    },
                                    placeholder: "Select a version"
                                });

                                $('.select-change-version[data-id='+selectedValue+']').on('select2:close', function (e) {
                                    //Récupérer le NS a changer, et la nouvelle référence.
                                    var oldRefNsId = $(this).data('id');
                                    var newRefNsId = $('.select-change-version[data-id='+selectedValue+']').val();

                                    // Ajax here
                                    var url = '{{ path("namespace_referenced_namespace_change", {'namespace' : 'namespaceID','referencedNamespace': 'oldRefNsId', 'newReferencedNamespace': 'newRefNsId'}) }}';
                                    url = url.replace("namespaceID", namespaceID);
                                    url = url.replace("oldRefNsId", oldRefNsId);
                                    url = url.replace("newRefNsId", newRefNsId);
                                    $.ajax({
                                        url: url,
                                        type: 'GET',
                                        dataType: 'json',
                                        success:function(data){
                                            window.location.reload();
                                        }
                                    });
                                });

                                var url = '{{ path("get_choices_namespaces", {'namespace' : 'selectedValue'}) }}';
                                url = url.replace("selectedValue", selectedValue);
                                $.ajax({
                                    url: url,
                                    type: 'GET',
                                    dataType: 'json',
                                    success:function(data){
                                        var childVersions = data.rootNamespaceChildVersions
                                        for (var item in childVersions) {
                                            if(selectedValue != item){
                                                $('.select-change-version[data-id='+selectedValue+']').append("<option value='" + item + "'>"+childVersions[item]+"</option>");
                                            }
                                        }
                                    }
                                });

                            }
                        }
                    });
            });

            $('a.updateViewComment').on('click', function () {
                var selectedObject = $(this).data("object");
                var selectedValue = $(this).data("id");
                var url = '{{ path("viewed_by_json", {'object': 'selectedObject', 'objectId': 'selectedValue'}) }}';
                url = url.replace("selectedValue", selectedValue);
                url = url.replace("selectedObject", selectedObject);
                $.ajax({
                    url: url,
                    type: 'GET',
                    dataType: 'json',
                    statusCode: {
                        204: function () {}
                    }
                });
            });

            $('#btns-choose-entity-relations .btn').on('click', function () {
                $('#btns-choose-entity-relations .btn').removeClass("btn-primary");
                $('#btns-choose-entity-relations .btn').addClass("btn-default");
                $(this).addClass("btn-primary");
                tableRelations.draw();
            });

            $('#btns-choose-type-relations .btn').on('click', function () {
                $('#btns-choose-type-relations .btn').removeClass("btn-primary");
                $('#btns-choose-type-relations .btn').addClass("btn-default");
                $(this).addClass("btn-primary");
                tableRelations.draw();
            });

            $(document).on('keyup', '#namespace_form_uriGenerator', function() {
                var stringForURI = this.value.trim();

                stringForURI = stringForURI.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
                stringForURI = stringForURI.replace(/[\s-]+/g, '-').toLowerCase().replace(/[^0-9a-z\-]/g, '');

                if (stringForURI === '') {
                    $('#namespace_form_namespaceURI').val('');
                }
                else {
                    $('#namespace_form_namespaceURI').val('https://ontome.net/ns/' + stringForURI + '/');
                }

            });

            //disable URI field if it's not an external URI
            $(document).on('change', '#namespace_form_isExternalNamespace', function() {
                var $input = $(this);
                var currentURI = '{{ namespace.namespaceUri }}';
                var standardLabel = '{{ namespace.standardLabel }}';
                if ($input.prop('checked')) {
                    if (currentURI.includes('https://ontome.net/ns/')) {
                        $('#namespace_form_namespaceURI').val('');
                    }
                    else $('#namespace_form_namespaceURI').val(currentURI);

                    $('#namespace_form_uriGenerator').val('');
                    $('#namespace_form_uriGenerator').parent().hide();
                    $('#namespace_form_namespaceURI').prop('readOnly', false);
                }
                else {
                    $('#namespace_form_uriGenerator').parent().show();
                    $('#namespace_form_namespaceURI').prop('readOnly', true);
                    var stringForURI = $('#namespace_form_uriGenerator').val();
                    if (stringForURI == '') {
                        stringForURI = standardLabel;
                    }
                    if (stringForURI != '') {
                        stringForURI = stringForURI.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
                        stringForURI = stringForURI.replace(/[\s-]+/g, '-').toLowerCase().replace(/[^0-9a-z\-]/g, '');
                        if (stringForURI != '') {
                            $('#namespace_form_namespaceURI').val('https://ontome.net/ns/' + stringForURI + "/");
                        }
                        else {
                            $('#namespace_form_namespaceURI').val('');
                        }
                    }
                    else if (currentURI != '') {
                        $('#namespace_form_namespaceURI').val(currentURI);
                    }
                }
            });

            var isParentExternalNamespace = '{{ namespace.topLevelNamespace.isExternalNamespace }}';
            if (isParentExternalNamespace == '1') {
                $('#namespace_form_isExternalNamespace').prop('checked', true);
                $('#namespace_form_uriGenerator').parent().hide();
                $('#namespace_form_namespaceURI').prop('readOnly', false);
            }
            else {
                $('#namespace_form_namespaceURI').prop('readOnly', true);
            }


            $('.dataTables_paginate').click(function () {
                $([document.documentElement, document.body]).animate({
                    scrollTop: $(this).closest('.dataTables_wrapper').prevAll("h3").offset().top
                }, 1000);
            });
        } );

        $("#namespace_form_rootNamespacePrefix").keypress(function(e)
        {
            var test = /^(([a-z0-9]+)(-?))*$/; //regex
            var value = $("#namespace_form_rootNamespacePrefix").val() + String.fromCharCode(e.keyCode); //get the charcode and convert to char
            //console.log(String.fromCharCode(e.keyCode));
            //console.log(value);
            //console.log(test.test(value));
            return test.test(value);
        });

        // --- ONGLET IDENTIFIERS ---
        {% if namespace.classPrefix is not null %}
        $('#msg-identifier-disabled-enabled b').text("Enabled");
        $('#table-identifiers').show();
        $('#btn-toggle-identifiers-disable-enable').addClass("btn-danger");
        $('#btn-toggle-identifiers-disable-enable').html('<i class="fas fa-toggle-off"></i> Disable');
        {% else %}
        $('#msg-identifier-disabled-enabled b').text("Disabled");
        $('#table-identifiers').hide();
        $('#p-btn-identifier button').hide();
        $('#btn-toggle-identifiers-disable-enable').addClass("btn-primary");
        $('#btn-toggle-identifiers-disable-enable').html('<i class="fas fa-toggle-on"></i> Enable');
        {% endif %}

        $("#next-class-identifier").text($("#namespace_edit_identifiers_form_classPrefix").val()+(parseInt($("#namespace_edit_identifiers_form_currentClassNumber").val(), 10)+1));
        $("#namespace_edit_identifiers_form_classPrefix, #namespace_edit_identifiers_form_currentClassNumber").on("change keyup", function() {
            $("#next-class-identifier").text($("#namespace_edit_identifiers_form_classPrefix").val()+(parseInt($("#namespace_edit_identifiers_form_currentClassNumber").val(), 10)+1));
        });

        $("#next-property-identifier").text($("#namespace_edit_identifiers_form_propertyPrefix").val()+(parseInt($("#namespace_edit_identifiers_form_currentPropertyNumber").val(), 10)+1));
        $("#namespace_edit_identifiers_form_propertyPrefix, #namespace_edit_identifiers_form_currentPropertyNumber").on("change keyup", function() {
            $("#next-property-identifier").text($("#namespace_edit_identifiers_form_propertyPrefix").val()+(parseInt($("#namespace_edit_identifiers_form_currentPropertyNumber").val(), 10)+1));
        });

        $("#p-btn-identifier button[type=reset]").on("mouseup mousedown", function(){
            setTimeout(function (){
                $("#next-class-identifier").text($("#namespace_edit_identifiers_form_classPrefix").val()+(parseInt($("#namespace_edit_identifiers_form_currentClassNumber").val(), 10)+1));
                $("#next-property-identifier").text($("#namespace_edit_identifiers_form_propertyPrefix").val()+(parseInt($("#namespace_edit_identifiers_form_currentPropertyNumber").val(), 10)+1));
            });
        });

        $(document).on("click", "#btn-toggle-identifiers-disable-enable", function(){
            btn = $(this);
            var namespaceID = {{ namespace.id }}

            var dialog = bootbox.confirm({
                message: ($('#table-identifiers').is(':visible')) ? "You are going to disable the automatic identifier management of your namespace. You will have to manually enter the identifiers of your new classes and properties. Do you wish to proceed?" : "You are going to enable the automatic identifier management of your namespace. A bad configuration will prevent you from creating new classes and properties. Be sure to set the correct parameters before proceeding.",
                title: '<i class="fas fa-exclamation-triangle"></i> Warning',
                buttons: {
                    confirm: {
                        label: 'Save',
                        className: 'btn-success'
                    },
                    cancel: {
                        label: 'Cancel',
                        className: 'btn-danger'
                    }
                },
                callback: function (result) {
                    if(result){
                        var url = "{{ path('namespace_toggle_identifier_management', {'id': namespace.id, '_fragment': 'identifiers'}) }}";
                        $.ajax({
                            url: url,
                            type: 'GET',
                            dataType: 'json',
                            statusCode: {
                                204: function () {
                                    if($('#table-identifiers').is(':visible')){
                                        // La gestion était automatique, on cache
                                        $('#msg-identifier-disabled-enabled b').text("Disabled");
                                        $('#table-identifiers').hide();
                                        $('#p-btn-identifier button').hide();
                                        $('#btn-toggle-identifiers-disable-enable').removeClass("btn-danger");
                                        $('#btn-toggle-identifiers-disable-enable').addClass("btn-primary");
                                        $('#btn-toggle-identifiers-disable-enable').html('<i class="fas fa-toggle-on"></i> Enable');
                                    }
                                    else {
                                        // La gestion n'était pas automatique, on affiche
                                        $('#msg-identifier-disabled-enabled b').text("Enabled");
                                        $('#table-identifiers').show();
                                        $('#p-btn-identifier button').show();
                                        $('#btn-toggle-identifiers-disable-enable').removeClass("btn-primary");
                                        $('#btn-toggle-identifiers-disable-enable').addClass("btn-danger");
                                        $('#btn-toggle-identifiers-disable-enable').html('<i class="fas fa-toggle-off"></i> Disable');
                                        $('#namespace_edit_identifiers_form_classPrefix').val('C');
                                        $("#next-class-identifier").text($("#namespace_edit_identifiers_form_classPrefix").val()+(parseInt($("#namespace_edit_identifiers_form_currentClassNumber").val(), 10)+1));
                                        $('#namespace_edit_identifiers_form_propertyPrefix').val('P');
                                        $("#next-property-identifier").text($("#namespace_edit_identifiers_form_propertyPrefix").val()+(parseInt($("#namespace_edit_identifiers_form_currentPropertyNumber").val(), 10)+1));
                                    }
                                }
                            }
                        });
                    }
                    dialog.modal('hide');
                    return false;
                }
            });
        });
        // --- FIN ONGLET IDENTIFIERS ---

        $('#example-fol-label').hide();
        $('#example-fol').hide();
        $('input[id=fol]').on('click', function(){
            if($('input[id=fol]').prop('checked')){
                $('#example-fol-label').show();
                $('#example-fol').show();
            }
            else{
                $('#example-fol-label').hide();
                $('#example-fol').hide();
            }
        });

        $('input[name=cardinality], input[id=text-cardinality]').on('click', function(){
            var strCardi = "(0,n:0,1)";
            if($('input[name=cardinality]').val() == "cardinality-opt-uml"){
                strCardi = "(0,n:0,1)";
            }
            if($('input[name=cardinality]:checked').val() == "cardinality-opt-er"){
                strCardi = "(0,1:0,n)";
            }
            if($('input[id=text-cardinality]').prop('checked')){
                strCardi = "one to many "+strCardi;
            }
            $('#example-cardinality').html(strCardi);
        });



        //-- EXPORT DOCX --
        $('.btn-export-disabled').hide();
        $('.btn-export').on('click', function(){
            $('.btn-export-disabled').show();
            $('.btn-export').hide();
            var namespaceID = $(this).data("value");
            var optCardinality = $('input[name=cardinality]:checked').val();
            var optFol = $('input[id=fol]').prop('checked');
            var optTextCardinality = $('input[id=text-cardinality]').prop('checked');
            //alert(optCardinality+optFol+optTextCardinality);
            var url = '{{ path("namespace_document", {'namespace': 'namespaceID'}) }}';
            url = url.replace("namespaceID", namespaceID);
            //url = url.replace("CardinalityOPT", optCardinality);
            //url = url.replace("TextCardinalityOPT", optTextCardinality);
            //url = url.replace("FolOPT", optFol);
            $.ajax({
                url: url,
                data:{
                    optCardinality: optCardinality,
                    optTextCardinality: optTextCardinality,
                    optFol: optFol
                },
                method: 'GET',
                xhrFields: {
                    responseType: 'blob'
                },
                success: function (response, status, xhr) {
                    $('.btn-export-disabled').hide();
                    $('.btn-export').show();
                    var header = xhr.getResponseHeader('Content-Disposition');
                    var a = document.createElement('a');
                    var url = window.URL.createObjectURL(response);
                    //console.log(response);
                    a.href = url;
                    a.download = xhr.getResponseHeader('content-disposition').split('filename=')[1].split('"')[1];
                    document.body.append(a);
                    a.click();
                    a.remove();
                    window.URL.revokeObjectURL(url);
                }
            });
        });

        $('#namespace_uri_parameter_form_uriParameter').on('change', function(){
            switch ($('#namespace_uri_parameter_form_uriParameter').val()){
                case '0':
                    $('#classExample').text('C1');
                    $('#propertyExample').text('P1');
                    break;
                case '1':
                    $('#classExample').text('C1_Class_Label');
                    $('#propertyExample').text('P1_Property_Label');
                    break;
                case '2':
                    $('#classExample').text('classLabel');
                    $('#propertyExample').text('propertyLabel');
                    break;
                case '3':
                    $('#classExample').text('user_choice');
                    $('#propertyExample').text('user_choice');
                    break;
                default:
                    $('#classExample').text('Error');
                    $('#propertyExample').text('Error');
            }
        });
    </script>
    {% include 'comment/js-bock.html.twig'  with {'objectType': 'namespace', 'objectId' : namespace.id  } %}
{% endblock %}
